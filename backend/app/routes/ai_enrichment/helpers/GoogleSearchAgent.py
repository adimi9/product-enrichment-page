# Google Search Agent

from google import genai
from google.genai.types import Tool, GenerateContentConfig, GoogleSearch 
import os
from dotenv import load_dotenv

load_dotenv()

class GoogleSearchAgent:
    
    def __init__(self):
        PROJECT_ID = os.getenv("PROJECT_ID")
        LOCATION = os.getenv("LOCATION")

        self.client = genai.Client(vertexai = True, project=PROJECT_ID, location=LOCATION)
        self.model_id = "gemini-2.5-pro-exp-03-25"
        self.google_search_tool = Tool(
            google_search = GoogleSearch()
        )

    def format_prompt(self, product_name, brand, attribute_prompt, barcode=None):
        prompt = f"""
            You are a product information retrieval agent. 
            Your task is to find factual information to enrich the given list of attributes of a product based on its name and brand.
    
            Product Name: {product_name}
            Brand: {brand}
        """
        if barcode:
            prompt += f"""
                Barcode: {barcode}
            """

        prompt += f"""
            Requested Attributes:
            {attribute_prompt}
    
            Instructions:
            1. For each attribute listed in "Requested Attributes", retrieve and provide the corresponding factual information.
            2. Only provide factual information. Do not generate opinions or creative content.
            3. Be as clear as possible in your responses, citing your sources if possible. Prioritise information from reliable sources.
            3. If you cannot find relevant information for an attribute, state "Not Found"
            5. Return the attributes as a JSON object with keys as all the given attributes, and values as per output generated.
        """

        prompt += """
            Next, treat the returned JSON as the result generated by a different model.
            Validate each key-value pair against the provided information.
            If any key-value pair is incorrect, correct it.
            Output the final, corrected JSON only.
            Use markdown to annotate the JSON output.
        """

        return prompt         

    def generate_response(self, product_name, brand, attribute_prompt, barcode=None):

        prompt = self.format_prompt(product_name, brand, attribute_prompt, barcode)
        
        response = self.client.models.generate_content(
            model=self.model_id,
            contents=prompt,
            config=GenerateContentConfig(
                tools=[self.google_search_tool],
                response_modalities=["TEXT"],
            )
        )

        return response 