# Google Search Agent

from google import genai
from google.genai.types import Tool, GenerateContentConfig, GoogleSearch
import os
from dotenv import load_dotenv

# Load environment variables from .env file
load_dotenv()

class GoogleSearchAgent:
    def __init__(self):
        """
        Initialize the GoogleSearchAgent with the required project and location.
        Sets up the Google GenAI client and defines the model ID.
        """
        PROJECT_ID = os.getenv("PROJECT_ID")  # Get project ID from environment variable
        LOCATION = os.getenv("LOCATION")  # Get location from environment variable

        # Initialize the GenAI client
        self.client = genai.Client(vertexai=True, project=PROJECT_ID, location=LOCATION)
        self.model_id = "gemini-2.5-pro-exp-03-25"  # Define the model ID for Google Search
        self.google_search_tool = Tool(google_search=GoogleSearch())  # Set up the Google search tool

    def format_prompt(self, product_name, brand, attribute_prompt, barcode=None) -> str:
        """
        Format the prompt for the search agent based on product name, brand, attributes, and optional barcode.
        
        Args:
            product_name (str): The name of the product.
            brand (str): The brand of the product.
            attribute_prompt (str): The list of attributes to be enriched.
            barcode (str, optional): The barcode of the product. Defaults to None.

        Returns:
            str: The formatted prompt string.
        """
        prompt = f"""
            You are a product information retrieval agent. 
            Your task is to find factual information to enrich the given list of attributes of a product based on its name and brand.
    
            Product Name: {product_name}
            Brand: {brand}
        """
        # Include barcode if provided
        if barcode:
            prompt += f"Barcode: {barcode}\n"

        prompt += f"Requested Attributes:\n{attribute_prompt}\n"
        
        # Include instructions for the agent
        prompt += """
            Instructions:
            1. For each attribute listed in "Requested Attributes", retrieve and provide the corresponding factual information.
            2. Only provide factual information. Do not generate opinions or creative content.
            3. Be as clear as possible in your responses, citing your sources if possible. Prioritise information from reliable sources.
            4. If you cannot find relevant information for an attribute, state "Not Found".
            5. Return the attributes as a JSON object with keys as all the given attributes, and values as per output generated.
        """

        # Instructions for validating and correcting the response
        prompt += """
            Next, treat the returned JSON as the result generated by a different model.
            Validate each key-value pair against the provided information.
            If any key-value pair is incorrect, correct it.
            Output the final, corrected JSON only.
            Use markdown to annotate the JSON output.
        """
        
        return prompt

    def generate_response(self, product_name, brand, attribute_prompt, barcode=None):
        """
        Generate a response from the Google GenAI model based on the provided product and attribute information.
        
        Args:
            product_name (str): The name of the product.
            brand (str): The brand of the product.
            attribute_prompt (str): The list of attributes to be enriched.
            barcode (str, optional): The barcode of the product. Defaults to None.
        
        Returns:
            dict: The response generated by the Google GenAI model.
        """
        # Format the prompt with the provided details
        prompt = self.format_prompt(product_name, brand, attribute_prompt, barcode)
        
        # Request a response from the model using the formatted prompt
        response = self.client.models.generate_content(
            model=self.model_id,
            contents=prompt,
            config=GenerateContentConfig(
                tools=[self.google_search_tool],  # Use the Google search tool
                response_modalities=["TEXT"],  # Expect the response in text format
            )
        )
        
        return response
