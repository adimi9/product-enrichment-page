from vertexai.preview.generative_models import GenerationConfig, GenerativeModel, Part
import os
from dotenv import load_dotenv

load_dotenv()

class ProductAgent:

    def __init__(
        self,
        gemini_model_version: str, 
        temperature: float = 0.0,
        max_output_tokens: int = 8192, 
    ):
        PROJECT_ID = os.getenv("PROJECT_ID")
        LOCATION = os.getenv("LOCATION")
        
        import vertexai
        
        vertexai.init(project=PROJECT_ID, location=LOCATION)

        config = GenerationConfig(
            temperature=temperature,
            max_output_tokens=max_output_tokens
        )

        # System instructions 
        sys_inst = """
            As an assistant for an online retailer, your task is to recognise attributes from the provided product image. 
            Your answer should be strictly consistent with what is in the image. 
            If any attributes do not exist in the image, please return null for that attribute.
        """

        self.gemini_model = GenerativeModel(
            gemini_model_version, generation_config=config, system_instruction=sys_inst
        )

        

    def format_prompt(self, product_name, brand, product_info, attribute_prompt, has_images=False, barcode=None):
        prompt = f"""
        The following product is being analyzed:
    
        Product Name: {product_name}
        Product Brand: {brand}
        """
    
        if barcode:
            prompt += f"\nBarcode: {barcode}\n"
    
        prompt += f"""
        Requested Attributes:
        {attribute_prompt}
    
        Google Search Information:
        {product_info}
    
        Instructions:
        1. Use the provided product details, Google Search info {"and the provided image(s)" if has_images else ""} to verify, supplement, and correct attributes." 
        2. Tailor your response to the specific product.
        3. If information is not available, return "Not Found". Do not speculate.
        4. Return a valid JSON object with all requested attribute keys.
    
        Then:
        - Treat the output JSON as generated by a different model.
        - Validate each key-value pair.
        - Correct if needed.
        - Output only the final JSON in Markdown format.
        """
    
        return prompt.strip()      

    def generate_response(
        self,
        product_brand: str,
        product_name: str,
        product_info: str,
        attribute_prompt: str,
        image_parts=None,
        barcode=None
    ) -> str:
        prompt_text = self.format_prompt(product_name, product_brand, product_info, attribute_prompt, barcode)
        prompt_part = Part.from_text(prompt_text)

        input_parts = image_parts + [prompt_part] if image_parts else [prompt_part]

        response_schema = {
            "type": "OBJECT",
            "properties": {
                "product_description": {"type": "STRING"},
                "item_weight": {"type": "STRING"},
                "ingredients": {"type": "ARRAY", "items": {"type": "STRING"}},
                "storage_requirements": {"type": "STRING"},
                "items_per_package": {"type": "STRING"},
                "colour": {"type": "STRING"},
                "material": {"type": "STRING"},
                "width": {"type": "STRING"},
                "height": {"type": "STRING"},
                "warranty": {"type": "STRING"},
            },
        }
        
        response = self.gemini_model.generate_content(
            contents = input_parts,
            generation_config = {
                'response_mime_type': 'application/json',
                'response_schema': response_schema,
            })
        return response

        
        